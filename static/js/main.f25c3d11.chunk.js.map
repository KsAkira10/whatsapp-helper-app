{"version":3,"sources":["components/Header.js","components/Frame.js","App.js","utils/index.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","rel","src","width","height","alt","Frame","props","phone","text","host","length","title","id","style","border","send","App","React","useState","setPhone","setText","generated","setGenerated","showTextarea","setShowTextarea","disabledSubmit","setDisabledSubmit","frame","setFrame","waLink","setWaLink","useEffect","iframe","document","querySelector","onSubmit","e","preventDefault","formatted","replace","navigator","userAgent","match","htmlFor","type","value","onChange","test","placeholder","checked","minLength","maxLength","disabled","Boolean","window","location","hostname","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f25c3d11.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/components/header.css';\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <nav className=\"navbar\">\n        <a className=\"navbar-brand\" href=\"https://whatsapp.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src=\"https://www-cdn.whatsapp.net/img/v4/whatsapp-logo.svg\" width=\"100%\" height=\"35\" className=\"d-inline-block align-top\" alt=\"Whatsapp\" />\n        </a>\n      </nav>\n    </header>\n  );\n}\n    \nexport default Header;","import React from 'react';\n\nfunction Frame(props) {\n  const { phone, text, host } = props;\n  const send = (phone, text) => (`/send?${phone ? `phone=55${phone}` : ''}${text ? `&text=${text}` : ''}`)\n  const iframeStyle = {\n    border: 'none',\n  };\n\n  if (phone.length === 11) {\n    return (\n      <iframe title=\"whatsapp\" id=\"luncher\" width=\"0\" height=\"0\" style={iframeStyle} src={`${host}${send(phone, text)}`}></iframe>\n    );\n  }\n\n  return (<></>);\n}\n\nexport default Frame;","import React from 'react';\nimport './App.css';\nimport { isMobile } from './utils';\nimport Header from './components/Header';\nimport Frame from './components/Frame';\n\nfunction App() {\n  const [phone, setPhone] = React.useState('');\n  const [text, setText] = React.useState('');\n  const [generated, setGenerated] = React.useState(false);\n  const [showTextarea, setShowTextarea] = React.useState(false);\n  const [disabledSubmit, setDisabledSubmit] = React.useState(true);\n  const [frame, setFrame] = React.useState(<></>);\n  const [waLink, setWaLink] = React.useState('#');\n  const phoneHandleChange = ({ target }) => {\n    const { value } = target;\n    const regex = /(0?[1-9]{2})*\\D*(9?)\\D?(\\d{4})+\\D?(\\d{4})\\b/g;\n    setPhone(value);\n\n    if (regex.test(value)) {\n      setDisabledSubmit(false);\n    } else {\n      setDisabledSubmit(true);\n    }\n  };\n  const textHandleChange = ({ target }) => {\n    const { value } = target;\n    setText(value);\n  };\n  const checkboxHandleChange = ({ target }) => {\n    const { checked } = target;\n    setShowTextarea(checked);\n\n    if (!checked) {\n      setText('');\n    }\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const formatted = phone.replace(/[^0-9]/g, '');\n    if (isMobile()) {\n      setFrame(<Frame phone={formatted} text={text} host=\"whatsapp:/\" />);\n    } else {\n      setFrame(<Frame phone={formatted} text={text} host=\"https://web.whatsapp.com\" />);\n    }\n    setGenerated(true);\n  };\n\n  React.useEffect(() => {\n    const iframe = document.querySelector('#luncher');\n    if (iframe) {\n      setWaLink(iframe.src);\n    } else {\n      setWaLink('#');\n    }\n  }, [frame]);\n\n  return (\n    <>\n      <Header />\n      <main className=\"container\">\n        <article className=\"article\">\n          <section>\n            <div>\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group text-left\">\n                  <label htmlFor=\"phone\">Número do WhatsApp</label>\n                  <input className=\"form-control form-control-lg\" type=\"tel\" id=\"phone\" value={phone} onChange={phoneHandleChange} placeholder=\"Ex.: 11912345678\" />\n                </div>\n\n                <div className=\"form-group text-left\">\n                  <div className=\"custom-control custom-checkbox\">\n                    <input id=\"text\" type=\"checkbox\" className=\"custom-control-input\" onChange={checkboxHandleChange} />\n                    <label htmlFor=\"text\" className=\"custom-control-label\">Mensagem?</label>\n                  </div>\n                  {showTextarea && <textarea className=\"form-control form-control-lg\" id=\"text\" value={text} onChange={textHandleChange} placeholder=\"Ex.: Olá! Tudo bem?\" minLength=\"2\" maxLength=\"50\" />}\n                </div>\n\n                <div className=\"form-group text-center\">\n                  {generated ? <a href={waLink} className=\"btn btn-primary btn-lg\">ENVIAR MENSAGEM</a> : <input className=\"btn btn-primary btn-lg\" type=\"submit\" value=\"GERAR LINK\" disabled={disabledSubmit} />}\n                </div>\n              </form>\n            </div>\n          </section>\n        </article>\n        {frame}\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","export function isMobile() {\n  return (navigator.userAgent.match(/Android/i)\n  || navigator.userAgent.match(/webOS/i)\n  || navigator.userAgent.match(/iPhone/i)\n  || navigator.userAgent.match(/iPad/i)\n  || navigator.userAgent.match(/iPod/i)\n  || navigator.userAgent.match(/BlackBerry/i)\n  || navigator.userAgent.match(/Windows Phone/i));\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}